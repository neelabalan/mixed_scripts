{
    "apigateway": {
        "class_name": "APIGateway",
        "documentation": "<fullname>Amazon API Gateway</fullname> Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.",
        "methods": [
            {
                "method_name": "create_api_key",
                "method_documentation": "Create an ApiKey resource. ",
                "method_request_schema": {
                    "name": {
                        "description": "The name of the ApiKey.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ApiKey.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Specifies whether the ApiKey can be used by callers.",
                        "type": "boolean"
                    },
                    "generateDistinctId": {
                        "description": "Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.",
                        "type": "boolean"
                    },
                    "value": {
                        "description": "Specifies a value of the API key.",
                        "type": "string"
                    },
                    "stageKeys": {
                        "description": "DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.",
                        "type": "list"
                    },
                    "customerId": {
                        "description": "An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the API Key.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the API Key.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the API Key.",
                        "type": "string"
                    },
                    "customerId": {
                        "description": "An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the API Key.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Specifies whether the API Key can be used by callers.",
                        "type": "boolean"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API Key was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the API Key was last updated.",
                        "type": "timestamp"
                    },
                    "stageKeys": {
                        "description": "A list of Stage resources that are associated with the ApiKey resource.",
                        "type": "list"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "create_authorizer",
                "method_documentation": "Adds a new Authorizer resource to an existing RestApi resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.",
                        "type": "string",
                        "enum": [
                            "TOKEN",
                            "REQUEST",
                            "COGNITO_USER_POOLS"
                        ]
                    },
                    "providerARNs": {
                        "description": "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. ",
                        "type": "list"
                    },
                    "authType": {
                        "description": "Optional customer-defined field, used in OpenAPI imports and exports without functional impact.",
                        "type": "string"
                    },
                    "authorizerUri": {
                        "description": "Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.",
                        "type": "string"
                    },
                    "authorizerCredentials": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.",
                        "type": "string"
                    },
                    "identitySource": {
                        "description": "The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.",
                        "type": "string"
                    },
                    "identityValidationExpression": {
                        "description": "A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.",
                        "type": "string"
                    },
                    "authorizerResultTtlInSeconds": {
                        "description": "The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the authorizer resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.",
                        "type": "string",
                        "enum": [
                            "TOKEN",
                            "REQUEST",
                            "COGNITO_USER_POOLS"
                        ]
                    },
                    "providerARNs": {
                        "description": "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. ",
                        "type": "list"
                    },
                    "authType": {
                        "description": "Optional customer-defined field, used in OpenAPI imports and exports without functional impact.",
                        "type": "string"
                    },
                    "authorizerUri": {
                        "description": "Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.",
                        "type": "string"
                    },
                    "authorizerCredentials": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.",
                        "type": "string"
                    },
                    "identitySource": {
                        "description": "The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>, <code>method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional. ",
                        "type": "string"
                    },
                    "identityValidationExpression": {
                        "description": "A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.",
                        "type": "string"
                    },
                    "authorizerResultTtlInSeconds": {
                        "description": "The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.",
                        "type": "integer"
                    }
                }
            },
            {
                "method_name": "create_base_path_mapping",
                "method_documentation": "Creates a new BasePathMapping resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The domain name of the BasePathMapping resource to create.",
                        "type": "string"
                    },
                    "basePath": {
                        "description": "The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.",
                        "type": "string"
                    },
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stage": {
                        "description": "The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "basePath": {
                        "description": "The base path name that callers of the API must provide as part of the URL after the domain name.",
                        "type": "string"
                    },
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stage": {
                        "description": "The name of the associated stage.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_deployment",
                "method_documentation": "Creates a Deployment resource, which makes a specified RestApi callable over the internet.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage resource for the Deployment resource to create.",
                        "type": "string"
                    },
                    "stageDescription": {
                        "description": "The description of the Stage resource for the Deployment resource to create.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description for the Deployment resource to create.",
                        "type": "string"
                    },
                    "cacheClusterEnabled": {
                        "description": "Enables a cache cluster for the Stage resource specified in the input.",
                        "type": "boolean"
                    },
                    "cacheClusterSize": {
                        "description": "The stage's cache capacity in GB. For more information about choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\">Enabling API caching to enhance responsiveness</a>.",
                        "type": "string",
                        "enum": [
                            "0.5",
                            "1.6",
                            "6.1",
                            "13.5",
                            "28.4",
                            "58.2",
                            "118",
                            "237"
                        ]
                    },
                    "variables": {
                        "description": "A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.",
                        "type": "map"
                    },
                    "canarySettings": {
                        "percentTraffic": {
                            "description": "The percentage (0.0-100.0) of traffic routed to the canary deployment.",
                            "type": "double"
                        },
                        "stageVariableOverrides": {
                            "description": "A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.",
                            "type": "map"
                        },
                        "useStageCache": {
                            "description": "A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.",
                            "type": "boolean"
                        }
                    },
                    "tracingEnabled": {
                        "description": "Specifies whether active tracing with X-ray is enabled for the Stage.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the deployment resource.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description for the deployment resource.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date and time that the deployment resource was created.",
                        "type": "timestamp"
                    },
                    "apiSummary": {
                        "description": "A summary of the RestApi at the date and time that the deployment resource was created.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "create_documentation_part",
                "method_documentation": "Creates a documentation part.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "location": {
                        "type": {
                            "description": "The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.",
                            "type": "string",
                            "enum": [
                                "API",
                                "AUTHORIZER",
                                "MODEL",
                                "RESOURCE",
                                "METHOD",
                                "PATH_PARAMETER",
                                "QUERY_PARAMETER",
                                "REQUEST_HEADER",
                                "REQUEST_BODY",
                                "RESPONSE",
                                "RESPONSE_HEADER",
                                "RESPONSE_BODY"
                            ]
                        },
                        "path": {
                            "description": "The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.",
                            "type": "string"
                        },
                        "method": {
                            "description": "The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "statusCode": {
                            "description": "The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "description": "The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The DocumentationPart identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.",
                        "type": "string"
                    },
                    "location": {
                        "type": {
                            "description": "The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.",
                            "type": "string",
                            "enum": [
                                "API",
                                "AUTHORIZER",
                                "MODEL",
                                "RESOURCE",
                                "METHOD",
                                "PATH_PARAMETER",
                                "QUERY_PARAMETER",
                                "REQUEST_HEADER",
                                "REQUEST_BODY",
                                "RESPONSE",
                                "RESPONSE_HEADER",
                                "RESPONSE_BODY"
                            ]
                        },
                        "path": {
                            "description": "The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.",
                            "type": "string"
                        },
                        "method": {
                            "description": "The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "statusCode": {
                            "description": "The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "description": "A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_documentation_version",
                "method_documentation": "Creates a documentation version",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationVersion": {
                        "description": "The version identifier of the new snapshot.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The stage name to be associated with the new documentation snapshot.",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description about the new documentation snapshot.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "version": {
                        "description": "The version identifier of the API documentation snapshot.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date when the API documentation snapshot is created.",
                        "type": "timestamp"
                    },
                    "description": {
                        "description": "The description of the API documentation snapshot.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_domain_name",
                "method_documentation": "Creates a new domain name.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    },
                    "certificateName": {
                        "description": "The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.",
                        "type": "string"
                    },
                    "certificateBody": {
                        "description": "[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.",
                        "type": "string"
                    },
                    "certificatePrivateKey": {
                        "description": "[Deprecated] Your edge-optimized endpoint's domain name certificate's private key.",
                        "type": "string"
                    },
                    "certificateChain": {
                        "description": "[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.",
                        "type": "string"
                    },
                    "certificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used by edge-optimized endpoint for this domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "regionalCertificateName": {
                        "description": "The user-friendly name of the certificate that will be used by regional endpoint for this domain name.",
                        "type": "string"
                    },
                    "regionalCertificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used by regional endpoint for this domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    },
                    "securityPolicy": {
                        "description": "The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.",
                        "type": "string",
                        "enum": [
                            "TLS_1_0",
                            "TLS_1_2"
                        ]
                    },
                    "mutualTlsAuthentication": {
                        "truststoreUri": {
                            "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
                            "type": "string"
                        },
                        "truststoreVersion": {
                            "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket",
                            "type": "string"
                        }
                    },
                    "ownershipVerificationCertificateArn": {
                        "description": "The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "domainName": {
                        "description": "The custom domain name as an API host name, for example, <code>my-api.example.com</code>.",
                        "type": "string"
                    },
                    "certificateName": {
                        "description": "The name of the certificate that will be used by edge-optimized endpoint for this domain name.",
                        "type": "string"
                    },
                    "certificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used by edge-optimized endpoint for this domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "certificateUploadDate": {
                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.",
                        "type": "timestamp"
                    },
                    "regionalDomainName": {
                        "description": "The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.",
                        "type": "string"
                    },
                    "regionalHostedZoneId": {
                        "description": "The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "regionalCertificateName": {
                        "description": "The name of the certificate that will be used for validating the regional domain name.",
                        "type": "string"
                    },
                    "regionalCertificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used for validating the regional domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "distributionDomainName": {
                        "description": "The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.",
                        "type": "string"
                    },
                    "distributionHostedZoneId": {
                        "description": "The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "domainNameStatus": {
                        "description": "The status of the DomainName migration. The valid values are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "UPDATING",
                            "PENDING",
                            "PENDING_CERTIFICATE_REIMPORT",
                            "PENDING_OWNERSHIP_VERIFICATION"
                        ]
                    },
                    "domainNameStatusMessage": {
                        "description": "An optional text message containing detailed information about status of the DomainName migration.",
                        "type": "string"
                    },
                    "securityPolicy": {
                        "description": "The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.",
                        "type": "string",
                        "enum": [
                            "TLS_1_0",
                            "TLS_1_2"
                        ]
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "mutualTlsAuthentication": {
                        "truststoreUri": {
                            "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
                            "type": "string"
                        },
                        "truststoreVersion": {
                            "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.",
                            "type": "string"
                        },
                        "truststoreWarnings": {
                            "description": "A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.",
                            "type": "list"
                        }
                    },
                    "ownershipVerificationCertificateArn": {
                        "description": "The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_model",
                "method_documentation": "Adds a new Model resource to an existing RestApi resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The RestApi identifier under which the Model will be created.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the model. Must be alphanumeric.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.",
                        "type": "string"
                    },
                    "contentType": {
                        "description": "The content-type for the model.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the model resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the model. Must be an alphanumeric string.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model. Do not include \"\\*/\" characters in the description of any properties because such \"\\*/\" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.",
                        "type": "string"
                    },
                    "contentType": {
                        "description": "The content-type for the model.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_request_validator",
                "method_documentation": "Creates a RequestValidator of a given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the to-be-created RequestValidator.",
                        "type": "string"
                    },
                    "validateRequestBody": {
                        "description": "A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).",
                        "type": "boolean"
                    },
                    "validateRequestParameters": {
                        "description": "A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of this RequestValidator.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of this RequestValidator",
                        "type": "string"
                    },
                    "validateRequestBody": {
                        "description": "A Boolean flag to indicate whether to validate a request body according to the configured Model schema.",
                        "type": "boolean"
                    },
                    "validateRequestParameters": {
                        "description": "A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "create_resource",
                "method_documentation": "Creates a Resource resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "The parent resource's identifier.",
                        "type": "string"
                    },
                    "pathPart": {
                        "description": "The last path segment for this resource.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The resource's identifier.",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "The parent resource's identifier.",
                        "type": "string"
                    },
                    "pathPart": {
                        "description": "The last path segment for this resource.",
                        "type": "string"
                    },
                    "path": {
                        "description": "The full path for this resource.",
                        "type": "string"
                    },
                    "resourceMethods": {
                        "httpMethod": {
                            "description": "The method's HTTP verb.",
                            "type": "string"
                        },
                        "authorizationType": {
                            "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                            "type": "string"
                        },
                        "authorizerId": {
                            "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                            "type": "string"
                        },
                        "apiKeyRequired": {
                            "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                            "type": "boolean"
                        },
                        "requestValidatorId": {
                            "description": "The identifier of a RequestValidator for request validation.",
                            "type": "string"
                        },
                        "operationName": {
                            "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                            "type": "map"
                        },
                        "requestModels": {
                            "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                            "type": "map"
                        },
                        "methodResponses": {
                            "statusCode": {
                                "description": "The method response's status code.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                                "type": "map"
                            },
                            "responseModels": {
                                "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                                "type": "map"
                            }
                        },
                        "methodIntegration": {
                            "type": {
                                "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                                "type": "string",
                                "enum": [
                                    "HTTP",
                                    "AWS",
                                    "MOCK",
                                    "HTTP_PROXY",
                                    "AWS_PROXY"
                                ]
                            },
                            "httpMethod": {
                                "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                                "type": "string"
                            },
                            "uri": {
                                "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                                "type": "string"
                            },
                            "connectionType": {
                                "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                                "type": "string",
                                "enum": [
                                    "INTERNET",
                                    "VPC_LINK"
                                ]
                            },
                            "connectionId": {
                                "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                                "type": "string"
                            },
                            "credentials": {
                                "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                                "type": "string"
                            },
                            "requestParameters": {
                                "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                                "type": "map"
                            },
                            "requestTemplates": {
                                "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                                "type": "map"
                            },
                            "passthroughBehavior": {
                                "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                                "type": "string"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            },
                            "timeoutInMillis": {
                                "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                                "type": "integer"
                            },
                            "cacheNamespace": {
                                "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                                "type": "string"
                            },
                            "cacheKeyParameters": {
                                "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                                "type": "list"
                            },
                            "integrationResponses": {
                                "statusCode": {
                                    "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                    "type": "string"
                                },
                                "selectionPattern": {
                                    "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                    "type": "string"
                                },
                                "responseParameters": {
                                    "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                    "type": "map"
                                },
                                "responseTemplates": {
                                    "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                    "type": "map"
                                },
                                "contentHandling": {
                                    "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                    "type": "string",
                                    "enum": [
                                        "CONVERT_TO_BINARY",
                                        "CONVERT_TO_TEXT"
                                    ]
                                }
                            },
                            "tlsConfig": {
                                "insecureSkipVerification": {
                                    "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                    "type": "boolean"
                                }
                            }
                        },
                        "authorizationScopes": {
                            "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                            "type": "list"
                        }
                    }
                }
            },
            {
                "method_name": "create_rest_api",
                "method_documentation": "Creates a new RestApi resource.",
                "method_request_schema": {
                    "name": {
                        "description": "The name of the RestApi.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the RestApi.",
                        "type": "string"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "cloneFrom": {
                        "description": "The ID of the RestApi that you want to clone from.",
                        "type": "string"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The API's identifier. This identifier is unique across all of your APIs in API Gateway.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The API's name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The API's description.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API was created.",
                        "type": "timestamp"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "warnings": {
                        "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import.",
                        "type": "list"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.",
                        "type": "boolean"
                    },
                    "rootResourceId": {
                        "description": "The API's root resource ID.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_stage",
                "method_documentation": "Creates a new Stage resource that references a pre-existing Deployment for the API. ",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The identifier of the Deployment resource for the Stage resource.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the Stage resource.",
                        "type": "string"
                    },
                    "cacheClusterEnabled": {
                        "description": "Whether cache clustering is enabled for the stage.",
                        "type": "boolean"
                    },
                    "cacheClusterSize": {
                        "description": "The stage's cache capacity in GB. For more information about choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\">Enabling API caching to enhance responsiveness</a>.",
                        "type": "string",
                        "enum": [
                            "0.5",
                            "1.6",
                            "6.1",
                            "13.5",
                            "28.4",
                            "58.2",
                            "118",
                            "237"
                        ]
                    },
                    "variables": {
                        "description": "A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.",
                        "type": "map"
                    },
                    "documentationVersion": {
                        "description": "The version of the associated API documentation.",
                        "type": "string"
                    },
                    "canarySettings": {
                        "percentTraffic": {
                            "description": "The percent (0-100) of traffic diverted to a canary deployment.",
                            "type": "double"
                        },
                        "deploymentId": {
                            "description": "The ID of the canary deployment.",
                            "type": "string"
                        },
                        "stageVariableOverrides": {
                            "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.",
                            "type": "map"
                        },
                        "useStageCache": {
                            "description": "A Boolean flag to indicate whether the canary deployment uses the stage cache or not.",
                            "type": "boolean"
                        }
                    },
                    "tracingEnabled": {
                        "description": "Specifies whether active tracing with X-ray is enabled for the Stage.",
                        "type": "boolean"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "deploymentId": {
                        "description": "The identifier of the Deployment that the stage points to.",
                        "type": "string"
                    },
                    "clientCertificateId": {
                        "description": "The identifier of a client certificate for an API stage.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The stage's description.",
                        "type": "string"
                    },
                    "cacheClusterEnabled": {
                        "description": "Specifies whether a cache cluster is enabled for the stage.",
                        "type": "boolean"
                    },
                    "cacheClusterSize": {
                        "description": "The stage's cache capacity in GB. For more information about choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\">Enabling API caching to enhance responsiveness</a>.",
                        "type": "string",
                        "enum": [
                            "0.5",
                            "1.6",
                            "6.1",
                            "13.5",
                            "28.4",
                            "58.2",
                            "118",
                            "237"
                        ]
                    },
                    "cacheClusterStatus": {
                        "description": "The status of the cache cluster for the stage, if enabled.",
                        "type": "string",
                        "enum": [
                            "CREATE_IN_PROGRESS",
                            "AVAILABLE",
                            "DELETE_IN_PROGRESS",
                            "NOT_AVAILABLE",
                            "FLUSH_IN_PROGRESS"
                        ]
                    },
                    "methodSettings": {
                        "metricsEnabled": {
                            "description": "Specifies whether Amazon CloudWatch metrics are enabled for this method.",
                            "type": "boolean"
                        },
                        "loggingLevel": {
                            "description": "Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.",
                            "type": "string"
                        },
                        "dataTraceEnabled": {
                            "description": "Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs.",
                            "type": "boolean"
                        },
                        "throttlingBurstLimit": {
                            "description": "Specifies the throttling burst limit.",
                            "type": "integer"
                        },
                        "throttlingRateLimit": {
                            "description": "Specifies the throttling rate limit.",
                            "type": "double"
                        },
                        "cachingEnabled": {
                            "description": "Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.",
                            "type": "boolean"
                        },
                        "cacheTtlInSeconds": {
                            "description": "Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.",
                            "type": "integer"
                        },
                        "cacheDataEncrypted": {
                            "description": "Specifies whether the cached responses are encrypted.",
                            "type": "boolean"
                        },
                        "requireAuthorizationForCacheControl": {
                            "description": "Specifies whether authorization is required for a cache invalidation request.",
                            "type": "boolean"
                        },
                        "unauthorizedCacheControlHeaderStrategy": {
                            "description": "Specifies how to handle unauthorized requests for cache invalidation.",
                            "type": "string",
                            "enum": [
                                "FAIL_WITH_403",
                                "SUCCEED_WITH_RESPONSE_HEADER",
                                "SUCCEED_WITHOUT_RESPONSE_HEADER"
                            ]
                        }
                    },
                    "variables": {
                        "description": "A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.",
                        "type": "map"
                    },
                    "documentationVersion": {
                        "description": "The version of the associated API documentation.",
                        "type": "string"
                    },
                    "accessLogSettings": {
                        "format": {
                            "description": "A single line format of the access logs of data, as specified by selected $context variables. The format must include at least <code>$context.requestId</code>.",
                            "type": "string"
                        },
                        "destinationArn": {
                            "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.",
                            "type": "string"
                        }
                    },
                    "canarySettings": {
                        "percentTraffic": {
                            "description": "The percent (0-100) of traffic diverted to a canary deployment.",
                            "type": "double"
                        },
                        "deploymentId": {
                            "description": "The ID of the canary deployment.",
                            "type": "string"
                        },
                        "stageVariableOverrides": {
                            "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.",
                            "type": "map"
                        },
                        "useStageCache": {
                            "description": "A Boolean flag to indicate whether the canary deployment uses the stage cache or not.",
                            "type": "boolean"
                        }
                    },
                    "tracingEnabled": {
                        "description": "Specifies whether active tracing with X-ray is enabled for the Stage.",
                        "type": "boolean"
                    },
                    "webAclArn": {
                        "description": "The ARN of the WebAcl associated with the Stage.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "createdDate": {
                        "description": "The timestamp when the stage was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the stage last updated.",
                        "type": "timestamp"
                    }
                }
            },
            {
                "method_name": "create_usage_plan",
                "method_documentation": "Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. ",
                "method_request_schema": {
                    "name": {
                        "description": "The name of the usage plan.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the usage plan.",
                        "type": "string"
                    },
                    "apiStages": {
                        "description": "The associated API stages of the usage plan.",
                        "type": "list"
                    },
                    "throttle": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "quota": {
                        "limit": {
                            "description": "The target maximum number of requests that can be made in a given time period.",
                            "type": "integer"
                        },
                        "offset": {
                            "description": "The number of requests subtracted from the given limit in the initial time period.",
                            "type": "integer"
                        },
                        "period": {
                            "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
                            "type": "string",
                            "enum": [
                                "DAY",
                                "WEEK",
                                "MONTH"
                            ]
                        }
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of a UsagePlan resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of a usage plan.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of a usage plan.",
                        "type": "string"
                    },
                    "apiStages": {
                        "description": "The associated API stages of a usage plan.",
                        "type": "list"
                    },
                    "throttle": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "quota": {
                        "limit": {
                            "description": "The target maximum number of requests that can be made in a given time period.",
                            "type": "integer"
                        },
                        "offset": {
                            "description": "The number of requests subtracted from the given limit in the initial time period.",
                            "type": "integer"
                        },
                        "period": {
                            "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
                            "type": "string",
                            "enum": [
                                "DAY",
                                "WEEK",
                                "MONTH"
                            ]
                        }
                    },
                    "productCode": {
                        "description": "The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "create_usage_plan_key",
                "method_documentation": "Creates a usage plan key for adding an existing API key to a usage plan.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The identifier of a UsagePlanKey resource for a plan customer.",
                        "type": "string"
                    },
                    "keyType": {
                        "description": "The type of a UsagePlanKey resource for a plan customer.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The Id of a usage plan key.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of a usage plan key.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of a usage plan key.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "create_vpc_link",
                "method_documentation": "Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.",
                "method_request_schema": {
                    "name": {
                        "description": "The name used to label and identify the VPC link.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the VPC link.",
                        "type": "string"
                    },
                    "targetArns": {
                        "description": "The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same Amazon Web Services account of the API owner.",
                        "type": "list"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name used to label and identify the VPC link.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the VPC link.",
                        "type": "string"
                    },
                    "targetArns": {
                        "description": "The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same Amazon Web Services account of the API owner.",
                        "type": "list"
                    },
                    "status": {
                        "description": "The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>. ",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "PENDING",
                            "DELETING",
                            "FAILED"
                        ]
                    },
                    "statusMessage": {
                        "description": "A description about the VPC link status.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "delete_api_key",
                "method_documentation": "Deletes the ApiKey resource.",
                "method_request_schema": {
                    "apiKey": {
                        "description": "The identifier of the ApiKey resource to be deleted.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_authorizer",
                "method_documentation": "Deletes an existing Authorizer resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of the Authorizer resource.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_base_path_mapping",
                "method_documentation": "Deletes the BasePathMapping resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The domain name of the BasePathMapping resource to delete.",
                        "type": "string"
                    },
                    "basePath": {
                        "description": "The base path name of the BasePathMapping resource to delete. To specify an empty base path, set this parameter to <code>'(none)'</code>.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_client_certificate",
                "method_documentation": "Deletes the ClientCertificate resource.",
                "method_request_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the ClientCertificate resource to be deleted.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_deployment",
                "method_documentation": "Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The identifier of the Deployment resource to delete.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_documentation_part",
                "method_documentation": "Deletes a documentation part",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationPartId": {
                        "description": "The identifier of the to-be-deleted documentation part.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_documentation_version",
                "method_documentation": "Deletes a documentation version.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationVersion": {
                        "description": "The version identifier of a to-be-deleted documentation snapshot.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_domain_name",
                "method_documentation": "Deletes the DomainName resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The name of the DomainName resource to be deleted.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_gateway_response",
                "method_documentation": "Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    }
                }
            },
            {
                "method_name": "delete_integration",
                "method_documentation": "Represents a delete integration.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a delete integration request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a delete integration request's HTTP method.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_integration_response",
                "method_documentation": "Represents a delete integration response.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a delete integration response request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a delete integration response request's HTTP method.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "Specifies a delete integration response request's status code.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_method",
                "method_documentation": "Deletes an existing Method resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the Method resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_method_response",
                "method_documentation": "Deletes an existing MethodResponse resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the MethodResponse resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "The status code identifier for the MethodResponse resource.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_model",
                "method_documentation": "Deletes a model.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "modelName": {
                        "description": "The name of the model to delete.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_request_validator",
                "method_documentation": "Deletes a RequestValidator of a given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of the RequestValidator to be deleted.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_resource",
                "method_documentation": "Deletes a Resource resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The identifier of the Resource resource.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_rest_api",
                "method_documentation": "Deletes the specified API.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_stage",
                "method_documentation": "Deletes a Stage resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage resource to delete.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_usage_plan",
                "method_documentation": "Deletes a usage plan of a given plan Id.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the to-be-deleted usage plan.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_usage_plan_key",
                "method_documentation": "Deletes a usage plan key and remove the underlying API key from the associated usage plan.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The Id of the UsagePlanKey resource to be deleted.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "delete_vpc_link",
                "method_documentation": "Deletes an existing VpcLink of a specified identifier.",
                "method_request_schema": {
                    "vpcLinkId": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "flush_stage_authorizers_cache",
                "method_documentation": "Flushes all authorizer cache entries on a stage.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the stage to flush.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "flush_stage_cache",
                "method_documentation": "Flushes a stage's cache.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the stage to flush its cache.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "generate_client_certificate",
                "method_documentation": "Generates a ClientCertificate resource.",
                "method_request_schema": {
                    "description": {
                        "description": "The description of the ClientCertificate.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the client certificate.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the client certificate.",
                        "type": "string"
                    },
                    "pemEncodedCertificate": {
                        "description": "The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the client certificate was created.",
                        "type": "timestamp"
                    },
                    "expirationDate": {
                        "description": "The timestamp when the client certificate will expire.",
                        "type": "timestamp"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_account",
                "method_documentation": "Gets information about the current Account resource.",
                "method_request_schema": {},
                "method_response_schema": {
                    "cloudwatchRoleArn": {
                        "description": "The ARN of an Amazon CloudWatch role for the current Account. ",
                        "type": "string"
                    },
                    "throttleSettings": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "features": {
                        "description": "A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>\"UsagePlans\"</code>.",
                        "type": "list"
                    },
                    "apiKeyVersion": {
                        "description": "The version of the API keys used for the account.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_api_key",
                "method_documentation": "Gets information about the current ApiKey resource.",
                "method_request_schema": {
                    "apiKey": {
                        "description": "The identifier of the ApiKey resource.",
                        "type": "string"
                    },
                    "includeValue": {
                        "description": "A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the API Key.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the API Key.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the API Key.",
                        "type": "string"
                    },
                    "customerId": {
                        "description": "An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the API Key.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Specifies whether the API Key can be used by callers.",
                        "type": "boolean"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API Key was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the API Key was last updated.",
                        "type": "timestamp"
                    },
                    "stageKeys": {
                        "description": "A list of Stage resources that are associated with the ApiKey resource.",
                        "type": "list"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_api_keys",
                "method_documentation": "Gets information about the current ApiKeys resource.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    },
                    "nameQuery": {
                        "description": "The name of queried API keys.",
                        "type": "string"
                    },
                    "customerId": {
                        "description": "The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.",
                        "type": "string"
                    },
                    "includeValues": {
                        "description": "A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "warnings": {
                        "description": "A list of warning messages logged during the import of API keys when the <code>failOnWarnings</code> option is set to true.",
                        "type": "list"
                    },
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_authorizer",
                "method_documentation": "Describe an existing Authorizer resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of the Authorizer resource.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the authorizer resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.",
                        "type": "string",
                        "enum": [
                            "TOKEN",
                            "REQUEST",
                            "COGNITO_USER_POOLS"
                        ]
                    },
                    "providerARNs": {
                        "description": "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. ",
                        "type": "list"
                    },
                    "authType": {
                        "description": "Optional customer-defined field, used in OpenAPI imports and exports without functional impact.",
                        "type": "string"
                    },
                    "authorizerUri": {
                        "description": "Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.",
                        "type": "string"
                    },
                    "authorizerCredentials": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.",
                        "type": "string"
                    },
                    "identitySource": {
                        "description": "The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>, <code>method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional. ",
                        "type": "string"
                    },
                    "identityValidationExpression": {
                        "description": "A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.",
                        "type": "string"
                    },
                    "authorizerResultTtlInSeconds": {
                        "description": "The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.",
                        "type": "integer"
                    }
                }
            },
            {
                "method_name": "get_authorizers",
                "method_documentation": "Describe an existing Authorizers resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_base_path_mapping",
                "method_documentation": "Describe a BasePathMapping resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The domain name of the BasePathMapping resource to be described.",
                        "type": "string"
                    },
                    "basePath": {
                        "description": "The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "basePath": {
                        "description": "The base path name that callers of the API must provide as part of the URL after the domain name.",
                        "type": "string"
                    },
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stage": {
                        "description": "The name of the associated stage.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_base_path_mappings",
                "method_documentation": "Represents a collection of BasePathMapping resources.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The domain name of a BasePathMapping resource.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_client_certificate",
                "method_documentation": "Gets information about the current ClientCertificate resource.",
                "method_request_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the ClientCertificate resource to be described.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the client certificate.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the client certificate.",
                        "type": "string"
                    },
                    "pemEncodedCertificate": {
                        "description": "The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the client certificate was created.",
                        "type": "timestamp"
                    },
                    "expirationDate": {
                        "description": "The timestamp when the client certificate will expire.",
                        "type": "timestamp"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_client_certificates",
                "method_documentation": "Gets a collection of ClientCertificate resources.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_deployment",
                "method_documentation": "Gets information about a Deployment resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The identifier of the Deployment resource to get information about.",
                        "type": "string"
                    },
                    "embed": {
                        "description": "A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>\"apisummary\"</code> string. For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the deployment resource.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description for the deployment resource.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date and time that the deployment resource was created.",
                        "type": "timestamp"
                    },
                    "apiSummary": {
                        "description": "A summary of the RestApi at the date and time that the deployment resource was created.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_deployments",
                "method_documentation": "Gets information about a Deployments collection.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_documentation_part",
                "method_documentation": "Gets a documentation part.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationPartId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The DocumentationPart identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.",
                        "type": "string"
                    },
                    "location": {
                        "type": {
                            "description": "The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.",
                            "type": "string",
                            "enum": [
                                "API",
                                "AUTHORIZER",
                                "MODEL",
                                "RESOURCE",
                                "METHOD",
                                "PATH_PARAMETER",
                                "QUERY_PARAMETER",
                                "REQUEST_HEADER",
                                "REQUEST_BODY",
                                "RESPONSE",
                                "RESPONSE_HEADER",
                                "RESPONSE_BODY"
                            ]
                        },
                        "path": {
                            "description": "The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.",
                            "type": "string"
                        },
                        "method": {
                            "description": "The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "statusCode": {
                            "description": "The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "description": "A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_documentation_parts",
                "method_documentation": "Gets documentation parts.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of API entities of the to-be-retrieved documentation parts. ",
                        "type": "string",
                        "enum": [
                            "API",
                            "AUTHORIZER",
                            "MODEL",
                            "RESOURCE",
                            "METHOD",
                            "PATH_PARAMETER",
                            "QUERY_PARAMETER",
                            "REQUEST_HEADER",
                            "REQUEST_BODY",
                            "RESPONSE",
                            "RESPONSE_HEADER",
                            "RESPONSE_BODY"
                        ]
                    },
                    "nameQuery": {
                        "description": "The name of API entities of the to-be-retrieved documentation parts.",
                        "type": "string"
                    },
                    "path": {
                        "description": "The path of API entities of the to-be-retrieved documentation parts.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    },
                    "locationStatus": {
                        "description": "The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving DocumentationPart resources with content and <code>UNDOCUMENTED</code> for DocumentationPart resources without content.",
                        "type": "string",
                        "enum": [
                            "DOCUMENTED",
                            "UNDOCUMENTED"
                        ]
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_documentation_version",
                "method_documentation": "Gets a documentation version.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationVersion": {
                        "description": "The version identifier of the to-be-retrieved documentation snapshot.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "version": {
                        "description": "The version identifier of the API documentation snapshot.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date when the API documentation snapshot is created.",
                        "type": "timestamp"
                    },
                    "description": {
                        "description": "The description of the API documentation snapshot.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_documentation_versions",
                "method_documentation": "Gets documentation versions.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_domain_name",
                "method_documentation": "Represents a domain name that is contained in a simpler, more intuitive URL that can be called.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The name of the DomainName resource.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "domainName": {
                        "description": "The custom domain name as an API host name, for example, <code>my-api.example.com</code>.",
                        "type": "string"
                    },
                    "certificateName": {
                        "description": "The name of the certificate that will be used by edge-optimized endpoint for this domain name.",
                        "type": "string"
                    },
                    "certificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used by edge-optimized endpoint for this domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "certificateUploadDate": {
                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.",
                        "type": "timestamp"
                    },
                    "regionalDomainName": {
                        "description": "The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.",
                        "type": "string"
                    },
                    "regionalHostedZoneId": {
                        "description": "The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "regionalCertificateName": {
                        "description": "The name of the certificate that will be used for validating the regional domain name.",
                        "type": "string"
                    },
                    "regionalCertificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used for validating the regional domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "distributionDomainName": {
                        "description": "The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.",
                        "type": "string"
                    },
                    "distributionHostedZoneId": {
                        "description": "The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "domainNameStatus": {
                        "description": "The status of the DomainName migration. The valid values are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "UPDATING",
                            "PENDING",
                            "PENDING_CERTIFICATE_REIMPORT",
                            "PENDING_OWNERSHIP_VERIFICATION"
                        ]
                    },
                    "domainNameStatusMessage": {
                        "description": "An optional text message containing detailed information about status of the DomainName migration.",
                        "type": "string"
                    },
                    "securityPolicy": {
                        "description": "The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.",
                        "type": "string",
                        "enum": [
                            "TLS_1_0",
                            "TLS_1_2"
                        ]
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "mutualTlsAuthentication": {
                        "truststoreUri": {
                            "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
                            "type": "string"
                        },
                        "truststoreVersion": {
                            "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.",
                            "type": "string"
                        },
                        "truststoreWarnings": {
                            "description": "A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.",
                            "type": "list"
                        }
                    },
                    "ownershipVerificationCertificateArn": {
                        "description": "The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_domain_names",
                "method_documentation": "Represents a collection of DomainName resources.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_export",
                "method_documentation": "Exports a deployed version of a RestApi in a specified format.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage that will be exported.",
                        "type": "string"
                    },
                    "exportType": {
                        "description": "The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.",
                        "type": "string"
                    },
                    "parameters": {
                        "description": "A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool",
                        "type": "map"
                    },
                    "accepts": {
                        "description": "The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "contentType": {
                        "description": "The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.",
                        "type": "string"
                    },
                    "contentDisposition": {
                        "description": "The content-disposition header value in the HTTP response.",
                        "type": "string"
                    },
                    "body": {
                        "description": "The binary blob response to GetExport, which contains the export.",
                        "type": "blob"
                    }
                }
            },
            {
                "method_name": "get_gateway_response",
                "method_documentation": "Gets a GatewayResponse of a specified response type on the given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    }
                },
                "method_response_schema": {
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    },
                    "statusCode": {
                        "description": "The HTTP status code for this GatewayResponse.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "defaultResponse": {
                        "description": "A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. ",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "get_gateway_responses",
                "method_documentation": "Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "Returns the entire collection, because of no pagination support.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_integration",
                "method_documentation": "Get the integration settings.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a get integration request's resource identifier",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a get integration request's HTTP method.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "type": {
                        "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "AWS",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ]
                    },
                    "httpMethod": {
                        "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                        "type": "string"
                    },
                    "uri": {
                        "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                        "type": "string"
                    },
                    "connectionType": {
                        "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                        "type": "string",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ]
                    },
                    "connectionId": {
                        "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                        "type": "map"
                    },
                    "requestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                        "type": "map"
                    },
                    "passthroughBehavior": {
                        "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                        "type": "string"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    },
                    "timeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                        "type": "integer"
                    },
                    "cacheNamespace": {
                        "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                        "type": "string"
                    },
                    "cacheKeyParameters": {
                        "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                        "type": "list"
                    },
                    "integrationResponses": {
                        "statusCode": {
                            "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                            "type": "string"
                        },
                        "selectionPattern": {
                            "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                            "type": "map"
                        },
                        "responseTemplates": {
                            "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                            "type": "map"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        }
                    },
                    "tlsConfig": {
                        "insecureSkipVerification": {
                            "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                            "type": "boolean"
                        }
                    }
                }
            },
            {
                "method_name": "get_integration_response",
                "method_documentation": "Represents a get integration response.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a get integration response request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a get integration response request's HTTP method.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "Specifies a get integration response request's status code.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                        "type": "string"
                    },
                    "selectionPattern": {
                        "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                        "type": "map"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    }
                }
            },
            {
                "method_name": "get_method",
                "method_documentation": "Describe an existing Method resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the Method resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies the method request's HTTP method type.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "httpMethod": {
                        "description": "The method's HTTP verb.",
                        "type": "string"
                    },
                    "authorizationType": {
                        "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                        "type": "string"
                    },
                    "apiKeyRequired": {
                        "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                        "type": "boolean"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of a RequestValidator for request validation.",
                        "type": "string"
                    },
                    "operationName": {
                        "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                        "type": "map"
                    },
                    "requestModels": {
                        "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                        "type": "map"
                    },
                    "methodResponses": {
                        "statusCode": {
                            "description": "The method response's status code.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                            "type": "map"
                        },
                        "responseModels": {
                            "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                            "type": "map"
                        }
                    },
                    "methodIntegration": {
                        "type": {
                            "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                            "type": "string",
                            "enum": [
                                "HTTP",
                                "AWS",
                                "MOCK",
                                "HTTP_PROXY",
                                "AWS_PROXY"
                            ]
                        },
                        "httpMethod": {
                            "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                            "type": "string"
                        },
                        "uri": {
                            "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                            "type": "string"
                        },
                        "connectionType": {
                            "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                            "type": "string",
                            "enum": [
                                "INTERNET",
                                "VPC_LINK"
                            ]
                        },
                        "connectionId": {
                            "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                            "type": "string"
                        },
                        "credentials": {
                            "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                            "type": "map"
                        },
                        "requestTemplates": {
                            "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                            "type": "map"
                        },
                        "passthroughBehavior": {
                            "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                            "type": "string"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        },
                        "timeoutInMillis": {
                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                            "type": "integer"
                        },
                        "cacheNamespace": {
                            "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                            "type": "string"
                        },
                        "cacheKeyParameters": {
                            "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                            "type": "list"
                        },
                        "integrationResponses": {
                            "statusCode": {
                                "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                "type": "string"
                            },
                            "selectionPattern": {
                                "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                "type": "map"
                            },
                            "responseTemplates": {
                                "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                "type": "map"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            }
                        },
                        "tlsConfig": {
                            "insecureSkipVerification": {
                                "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                "type": "boolean"
                            }
                        }
                    },
                    "authorizationScopes": {
                        "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_method_response",
                "method_documentation": "Describes a MethodResponse resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the MethodResponse resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "The status code for the MethodResponse resource.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "The method response's status code.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                        "type": "map"
                    },
                    "responseModels": {
                        "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_model",
                "method_documentation": "Describes an existing model defined for a RestApi resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The RestApi identifier under which the Model exists.",
                        "type": "string"
                    },
                    "modelName": {
                        "description": "The name of the model as an identifier.",
                        "type": "string"
                    },
                    "flatten": {
                        "description": "A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the model resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the model. Must be an alphanumeric string.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model. Do not include \"\\*/\" characters in the description of any properties because such \"\\*/\" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.",
                        "type": "string"
                    },
                    "contentType": {
                        "description": "The content-type for the model.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_model_template",
                "method_documentation": "Generates a sample mapping template that can be used to transform a payload into the structure of a model.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "modelName": {
                        "description": "The name of the model for which to generate a template.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "value": {
                        "description": "The Apache Velocity Template Language (VTL) template content used for the template resource.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_models",
                "method_documentation": "Describes existing Models defined for a RestApi resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_request_validator",
                "method_documentation": "Gets a RequestValidator of a given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of the RequestValidator to be retrieved.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of this RequestValidator.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of this RequestValidator",
                        "type": "string"
                    },
                    "validateRequestBody": {
                        "description": "A Boolean flag to indicate whether to validate a request body according to the configured Model schema.",
                        "type": "boolean"
                    },
                    "validateRequestParameters": {
                        "description": "A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "get_request_validators",
                "method_documentation": "Gets the RequestValidators collection of a given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_resource",
                "method_documentation": "Lists information about a resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The identifier for the Resource resource.",
                        "type": "string"
                    },
                    "embed": {
                        "description": "A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>\"methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The resource's identifier.",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "The parent resource's identifier.",
                        "type": "string"
                    },
                    "pathPart": {
                        "description": "The last path segment for this resource.",
                        "type": "string"
                    },
                    "path": {
                        "description": "The full path for this resource.",
                        "type": "string"
                    },
                    "resourceMethods": {
                        "httpMethod": {
                            "description": "The method's HTTP verb.",
                            "type": "string"
                        },
                        "authorizationType": {
                            "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                            "type": "string"
                        },
                        "authorizerId": {
                            "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                            "type": "string"
                        },
                        "apiKeyRequired": {
                            "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                            "type": "boolean"
                        },
                        "requestValidatorId": {
                            "description": "The identifier of a RequestValidator for request validation.",
                            "type": "string"
                        },
                        "operationName": {
                            "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                            "type": "map"
                        },
                        "requestModels": {
                            "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                            "type": "map"
                        },
                        "methodResponses": {
                            "statusCode": {
                                "description": "The method response's status code.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                                "type": "map"
                            },
                            "responseModels": {
                                "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                                "type": "map"
                            }
                        },
                        "methodIntegration": {
                            "type": {
                                "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                                "type": "string",
                                "enum": [
                                    "HTTP",
                                    "AWS",
                                    "MOCK",
                                    "HTTP_PROXY",
                                    "AWS_PROXY"
                                ]
                            },
                            "httpMethod": {
                                "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                                "type": "string"
                            },
                            "uri": {
                                "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                                "type": "string"
                            },
                            "connectionType": {
                                "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                                "type": "string",
                                "enum": [
                                    "INTERNET",
                                    "VPC_LINK"
                                ]
                            },
                            "connectionId": {
                                "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                                "type": "string"
                            },
                            "credentials": {
                                "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                                "type": "string"
                            },
                            "requestParameters": {
                                "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                                "type": "map"
                            },
                            "requestTemplates": {
                                "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                                "type": "map"
                            },
                            "passthroughBehavior": {
                                "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                                "type": "string"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            },
                            "timeoutInMillis": {
                                "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                                "type": "integer"
                            },
                            "cacheNamespace": {
                                "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                                "type": "string"
                            },
                            "cacheKeyParameters": {
                                "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                                "type": "list"
                            },
                            "integrationResponses": {
                                "statusCode": {
                                    "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                    "type": "string"
                                },
                                "selectionPattern": {
                                    "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                    "type": "string"
                                },
                                "responseParameters": {
                                    "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                    "type": "map"
                                },
                                "responseTemplates": {
                                    "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                    "type": "map"
                                },
                                "contentHandling": {
                                    "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                    "type": "string",
                                    "enum": [
                                        "CONVERT_TO_BINARY",
                                        "CONVERT_TO_TEXT"
                                    ]
                                }
                            },
                            "tlsConfig": {
                                "insecureSkipVerification": {
                                    "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                    "type": "boolean"
                                }
                            }
                        },
                        "authorizationScopes": {
                            "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                            "type": "list"
                        }
                    }
                }
            },
            {
                "method_name": "get_resources",
                "method_documentation": "Lists information about a collection of Resource resources.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    },
                    "embed": {
                        "description": "A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>\"methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_rest_api",
                "method_documentation": "Lists the RestApi resource in the collection.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The API's identifier. This identifier is unique across all of your APIs in API Gateway.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The API's name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The API's description.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API was created.",
                        "type": "timestamp"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "warnings": {
                        "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import.",
                        "type": "list"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.",
                        "type": "boolean"
                    },
                    "rootResourceId": {
                        "description": "The API's root resource ID.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_rest_apis",
                "method_documentation": "Lists the RestApis resources for your collection.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_sdk",
                "method_documentation": "Generates a client SDK for a RestApi and Stage.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage that the SDK will use.",
                        "type": "string"
                    },
                    "sdkType": {
                        "description": "The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.",
                        "type": "string"
                    },
                    "parameters": {
                        "description": "A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>, a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. ",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "contentType": {
                        "description": "The content-type header value in the HTTP response.",
                        "type": "string"
                    },
                    "contentDisposition": {
                        "description": "The content-disposition header value in the HTTP response.",
                        "type": "string"
                    },
                    "body": {
                        "description": "The binary blob response to GetSdk, which contains the generated SDK.",
                        "type": "blob"
                    }
                }
            },
            {
                "method_name": "get_sdk_type",
                "method_documentation": "Gets an SDK type.",
                "method_request_schema": {
                    "id": {
                        "description": "The identifier of the queried SdkType instance.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of an SdkType instance.",
                        "type": "string"
                    },
                    "friendlyName": {
                        "description": "The user-friendly name of an SdkType instance.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of an SdkType.",
                        "type": "string"
                    },
                    "configurationProperties": {
                        "description": "A list of configuration properties of an SdkType.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_sdk_types",
                "method_documentation": "Gets SDK types",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_stage",
                "method_documentation": "Gets information about a Stage resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage resource to get information about.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "deploymentId": {
                        "description": "The identifier of the Deployment that the stage points to.",
                        "type": "string"
                    },
                    "clientCertificateId": {
                        "description": "The identifier of a client certificate for an API stage.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The stage's description.",
                        "type": "string"
                    },
                    "cacheClusterEnabled": {
                        "description": "Specifies whether a cache cluster is enabled for the stage.",
                        "type": "boolean"
                    },
                    "cacheClusterSize": {
                        "description": "The stage's cache capacity in GB. For more information about choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\">Enabling API caching to enhance responsiveness</a>.",
                        "type": "string",
                        "enum": [
                            "0.5",
                            "1.6",
                            "6.1",
                            "13.5",
                            "28.4",
                            "58.2",
                            "118",
                            "237"
                        ]
                    },
                    "cacheClusterStatus": {
                        "description": "The status of the cache cluster for the stage, if enabled.",
                        "type": "string",
                        "enum": [
                            "CREATE_IN_PROGRESS",
                            "AVAILABLE",
                            "DELETE_IN_PROGRESS",
                            "NOT_AVAILABLE",
                            "FLUSH_IN_PROGRESS"
                        ]
                    },
                    "methodSettings": {
                        "metricsEnabled": {
                            "description": "Specifies whether Amazon CloudWatch metrics are enabled for this method.",
                            "type": "boolean"
                        },
                        "loggingLevel": {
                            "description": "Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.",
                            "type": "string"
                        },
                        "dataTraceEnabled": {
                            "description": "Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs.",
                            "type": "boolean"
                        },
                        "throttlingBurstLimit": {
                            "description": "Specifies the throttling burst limit.",
                            "type": "integer"
                        },
                        "throttlingRateLimit": {
                            "description": "Specifies the throttling rate limit.",
                            "type": "double"
                        },
                        "cachingEnabled": {
                            "description": "Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.",
                            "type": "boolean"
                        },
                        "cacheTtlInSeconds": {
                            "description": "Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.",
                            "type": "integer"
                        },
                        "cacheDataEncrypted": {
                            "description": "Specifies whether the cached responses are encrypted.",
                            "type": "boolean"
                        },
                        "requireAuthorizationForCacheControl": {
                            "description": "Specifies whether authorization is required for a cache invalidation request.",
                            "type": "boolean"
                        },
                        "unauthorizedCacheControlHeaderStrategy": {
                            "description": "Specifies how to handle unauthorized requests for cache invalidation.",
                            "type": "string",
                            "enum": [
                                "FAIL_WITH_403",
                                "SUCCEED_WITH_RESPONSE_HEADER",
                                "SUCCEED_WITHOUT_RESPONSE_HEADER"
                            ]
                        }
                    },
                    "variables": {
                        "description": "A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.",
                        "type": "map"
                    },
                    "documentationVersion": {
                        "description": "The version of the associated API documentation.",
                        "type": "string"
                    },
                    "accessLogSettings": {
                        "format": {
                            "description": "A single line format of the access logs of data, as specified by selected $context variables. The format must include at least <code>$context.requestId</code>.",
                            "type": "string"
                        },
                        "destinationArn": {
                            "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.",
                            "type": "string"
                        }
                    },
                    "canarySettings": {
                        "percentTraffic": {
                            "description": "The percent (0-100) of traffic diverted to a canary deployment.",
                            "type": "double"
                        },
                        "deploymentId": {
                            "description": "The ID of the canary deployment.",
                            "type": "string"
                        },
                        "stageVariableOverrides": {
                            "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.",
                            "type": "map"
                        },
                        "useStageCache": {
                            "description": "A Boolean flag to indicate whether the canary deployment uses the stage cache or not.",
                            "type": "boolean"
                        }
                    },
                    "tracingEnabled": {
                        "description": "Specifies whether active tracing with X-ray is enabled for the Stage.",
                        "type": "boolean"
                    },
                    "webAclArn": {
                        "description": "The ARN of the WebAcl associated with the Stage.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "createdDate": {
                        "description": "The timestamp when the stage was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the stage last updated.",
                        "type": "timestamp"
                    }
                }
            },
            {
                "method_name": "get_stages",
                "method_documentation": "Gets information about one or more Stage resources.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The stages' deployment identifiers.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "item": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_tags",
                "method_documentation": "Gets the Tags collection for a given resource.",
                "method_request_schema": {
                    "resourceArn": {
                        "description": "The ARN of a resource that can be tagged.",
                        "type": "string"
                    },
                    "position": {
                        "description": "(Not currently supported) The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "(Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_usage",
                "method_documentation": "Gets the usage data of a usage plan in a specified time interval.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the usage plan associated with the usage data.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The Id of the API key associated with the resultant usage data.",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The starting date (e.g., 2016-01-01) of the usage data.",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "The ending date (e.g., 2016-12-31) of the usage data.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "usagePlanId": {
                        "description": "The plan Id associated with this usage data.",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The starting date of the usage data.",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "The ending date of the usage data.",
                        "type": "string"
                    },
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., \"values\" : { \"{api_key}\" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_usage_plan",
                "method_documentation": "Gets a usage plan of a given plan identifier.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The identifier of the UsagePlan resource to be retrieved.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of a UsagePlan resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of a usage plan.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of a usage plan.",
                        "type": "string"
                    },
                    "apiStages": {
                        "description": "The associated API stages of a usage plan.",
                        "type": "list"
                    },
                    "throttle": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "quota": {
                        "limit": {
                            "description": "The target maximum number of requests that can be made in a given time period.",
                            "type": "integer"
                        },
                        "offset": {
                            "description": "The number of requests subtracted from the given limit in the initial time period.",
                            "type": "integer"
                        },
                        "period": {
                            "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
                            "type": "string",
                            "enum": [
                                "DAY",
                                "WEEK",
                                "MONTH"
                            ]
                        }
                    },
                    "productCode": {
                        "description": "The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_usage_plan_key",
                "method_documentation": "Gets a usage plan key of a given key identifier.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The Id of a usage plan key.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of a usage plan key.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of a usage plan key.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "get_usage_plan_keys",
                "method_documentation": "Gets all the usage plan keys representing the API keys added to a specified usage plan.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.",
                        "type": "string"
                    },
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    },
                    "nameQuery": {
                        "description": "A query parameter specifying the name of the to-be-returned usage plan keys.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_usage_plans",
                "method_documentation": "Gets all the usage plans of the caller's account.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The identifier of the API key associated with the usage plans.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "get_vpc_link",
                "method_documentation": "Gets a specified VPC link under the caller's account in a region.",
                "method_request_schema": {
                    "vpcLinkId": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name used to label and identify the VPC link.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the VPC link.",
                        "type": "string"
                    },
                    "targetArns": {
                        "description": "The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same Amazon Web Services account of the API owner.",
                        "type": "list"
                    },
                    "status": {
                        "description": "The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>. ",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "PENDING",
                            "DELETING",
                            "FAILED"
                        ]
                    },
                    "statusMessage": {
                        "description": "A description about the VPC link status.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "get_vpc_links",
                "method_documentation": "Gets the VpcLinks collection under the caller's account in a selected region.",
                "method_request_schema": {
                    "position": {
                        "description": "The current pagination position in the paged result set.",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of returned results per page. The default value is 25 and the maximum value is 500.",
                        "type": "integer"
                    }
                },
                "method_response_schema": {
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The current page of elements from this collection.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "import_api_keys",
                "method_documentation": "Import API keys from an external source, such as a CSV-formatted file.",
                "method_request_schema": {
                    "body": {
                        "description": "The payload of the POST request to import API keys. For the payload format, see API Key File Format.",
                        "type": "blob"
                    },
                    "format": {
                        "description": "A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.",
                        "type": "string",
                        "enum": [
                            "csv"
                        ]
                    },
                    "failOnWarnings": {
                        "description": "A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.",
                        "type": "boolean"
                    }
                },
                "method_response_schema": {
                    "ids": {
                        "description": "A list of all the ApiKey identifiers.",
                        "type": "list"
                    },
                    "warnings": {
                        "description": "A list of warning messages.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "import_documentation_parts",
                "method_documentation": "Imports documentation parts",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "mode": {
                        "description": "A query parameter to indicate whether to overwrite (<code>overwrite</code>) any existing DocumentationParts definition or to merge (<code>merge</code>) the new definition into the existing one. The default value is <code>merge</code>.",
                        "type": "string",
                        "enum": [
                            "merge",
                            "overwrite"
                        ]
                    },
                    "failOnWarnings": {
                        "description": "A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.",
                        "type": "boolean"
                    },
                    "body": {
                        "description": "Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.",
                        "type": "blob"
                    }
                },
                "method_response_schema": {
                    "ids": {
                        "description": "A list of the returned documentation part identifiers.",
                        "type": "list"
                    },
                    "warnings": {
                        "description": "A list of warning messages reported during import of documentation parts.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "import_rest_api",
                "method_documentation": "A feature of the API Gateway control service for creating a new API from an external API definition file.",
                "method_request_schema": {
                    "failOnWarnings": {
                        "description": "A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.",
                        "type": "boolean"
                    },
                    "parameters": {
                        "description": "A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.  To exclude DocumentationParts from the import, set <code>parameters</code> as <code>ignore=documentation</code>.  To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.  To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.",
                        "type": "map"
                    },
                    "body": {
                        "description": "The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.",
                        "type": "blob"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The API's identifier. This identifier is unique across all of your APIs in API Gateway.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The API's name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The API's description.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API was created.",
                        "type": "timestamp"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "warnings": {
                        "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import.",
                        "type": "list"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.",
                        "type": "boolean"
                    },
                    "rootResourceId": {
                        "description": "The API's root resource ID.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "put_gateway_response",
                "method_documentation": "Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    },
                    "statusCode": {
                        "description": "The HTTP status code of the GatewayResponse.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    },
                    "statusCode": {
                        "description": "The HTTP status code for this GatewayResponse.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "defaultResponse": {
                        "description": "A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. ",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "put_integration",
                "method_documentation": "Sets up a method's integration.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a put integration request's resource ID.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies the HTTP method for the integration.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Specifies a put integration input's type.",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "AWS",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ]
                    },
                    "integrationHttpMethod": {
                        "description": "The HTTP method for the integration.",
                        "type": "string"
                    },
                    "uri": {
                        "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.",
                        "type": "string"
                    },
                    "connectionType": {
                        "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                        "type": "string",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ]
                    },
                    "connectionId": {
                        "description": "The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Specifies whether credentials are required for a put integration.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                        "type": "map"
                    },
                    "requestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                        "type": "map"
                    },
                    "passthroughBehavior": {
                        "description": "Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. ",
                        "type": "string"
                    },
                    "cacheNamespace": {
                        "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                        "type": "string"
                    },
                    "cacheKeyParameters": {
                        "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                        "type": "list"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    },
                    "timeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                        "type": "integer"
                    },
                    "tlsConfig": {
                        "insecureSkipVerification": {
                            "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                            "type": "boolean"
                        }
                    }
                },
                "method_response_schema": {
                    "type": {
                        "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "AWS",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ]
                    },
                    "httpMethod": {
                        "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                        "type": "string"
                    },
                    "uri": {
                        "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                        "type": "string"
                    },
                    "connectionType": {
                        "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                        "type": "string",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ]
                    },
                    "connectionId": {
                        "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                        "type": "map"
                    },
                    "requestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                        "type": "map"
                    },
                    "passthroughBehavior": {
                        "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                        "type": "string"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    },
                    "timeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                        "type": "integer"
                    },
                    "cacheNamespace": {
                        "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                        "type": "string"
                    },
                    "cacheKeyParameters": {
                        "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                        "type": "list"
                    },
                    "integrationResponses": {
                        "statusCode": {
                            "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                            "type": "string"
                        },
                        "selectionPattern": {
                            "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                            "type": "map"
                        },
                        "responseTemplates": {
                            "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                            "type": "map"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        }
                    },
                    "tlsConfig": {
                        "insecureSkipVerification": {
                            "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                            "type": "boolean"
                        }
                    }
                }
            },
            {
                "method_name": "put_integration_response",
                "method_documentation": "Represents a put integration.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a put integration response request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a put integration response request's HTTP method.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                        "type": "string"
                    },
                    "selectionPattern": {
                        "description": "Specifies the selection pattern of a put integration response.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Specifies a put integration response's templates.",
                        "type": "map"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                        "type": "string"
                    },
                    "selectionPattern": {
                        "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                        "type": "map"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    }
                }
            },
            {
                "method_name": "put_method",
                "method_documentation": "Add a method to an existing Resource resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the new Method resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies the method request's HTTP method type.",
                        "type": "string"
                    },
                    "authorizationType": {
                        "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.",
                        "type": "string"
                    },
                    "apiKeyRequired": {
                        "description": "Specifies whether the method required a valid ApiKey.",
                        "type": "boolean"
                    },
                    "operationName": {
                        "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.",
                        "type": "map"
                    },
                    "requestModels": {
                        "description": "Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.",
                        "type": "map"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of a RequestValidator for validating the method request.",
                        "type": "string"
                    },
                    "authorizationScopes": {
                        "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "httpMethod": {
                        "description": "The method's HTTP verb.",
                        "type": "string"
                    },
                    "authorizationType": {
                        "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                        "type": "string"
                    },
                    "apiKeyRequired": {
                        "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                        "type": "boolean"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of a RequestValidator for request validation.",
                        "type": "string"
                    },
                    "operationName": {
                        "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                        "type": "map"
                    },
                    "requestModels": {
                        "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                        "type": "map"
                    },
                    "methodResponses": {
                        "statusCode": {
                            "description": "The method response's status code.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                            "type": "map"
                        },
                        "responseModels": {
                            "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                            "type": "map"
                        }
                    },
                    "methodIntegration": {
                        "type": {
                            "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                            "type": "string",
                            "enum": [
                                "HTTP",
                                "AWS",
                                "MOCK",
                                "HTTP_PROXY",
                                "AWS_PROXY"
                            ]
                        },
                        "httpMethod": {
                            "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                            "type": "string"
                        },
                        "uri": {
                            "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                            "type": "string"
                        },
                        "connectionType": {
                            "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                            "type": "string",
                            "enum": [
                                "INTERNET",
                                "VPC_LINK"
                            ]
                        },
                        "connectionId": {
                            "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                            "type": "string"
                        },
                        "credentials": {
                            "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                            "type": "map"
                        },
                        "requestTemplates": {
                            "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                            "type": "map"
                        },
                        "passthroughBehavior": {
                            "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                            "type": "string"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        },
                        "timeoutInMillis": {
                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                            "type": "integer"
                        },
                        "cacheNamespace": {
                            "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                            "type": "string"
                        },
                        "cacheKeyParameters": {
                            "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                            "type": "list"
                        },
                        "integrationResponses": {
                            "statusCode": {
                                "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                "type": "string"
                            },
                            "selectionPattern": {
                                "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                "type": "map"
                            },
                            "responseTemplates": {
                                "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                "type": "map"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            }
                        },
                        "tlsConfig": {
                            "insecureSkipVerification": {
                                "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                "type": "boolean"
                            }
                        }
                    },
                    "authorizationScopes": {
                        "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "put_method_response",
                "method_documentation": "Adds a MethodResponse to an existing Method resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the Method resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "The method response's status code.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                        "type": "map"
                    },
                    "responseModels": {
                        "description": "Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "The method response's status code.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                        "type": "map"
                    },
                    "responseModels": {
                        "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "put_rest_api",
                "method_documentation": "A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "mode": {
                        "description": "The <code>mode</code> query parameter to specify the update mode. Valid values are \"merge\" and \"overwrite\". By default, the update mode is \"merge\".",
                        "type": "string",
                        "enum": [
                            "merge",
                            "overwrite"
                        ]
                    },
                    "failOnWarnings": {
                        "description": "A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.",
                        "type": "boolean"
                    },
                    "parameters": {
                        "description": "Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>.",
                        "type": "map"
                    },
                    "body": {
                        "description": "The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.",
                        "type": "blob"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The API's identifier. This identifier is unique across all of your APIs in API Gateway.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The API's name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The API's description.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API was created.",
                        "type": "timestamp"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "warnings": {
                        "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import.",
                        "type": "list"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.",
                        "type": "boolean"
                    },
                    "rootResourceId": {
                        "description": "The API's root resource ID.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "tag_resource",
                "method_documentation": "Adds or updates a tag on a given resource.",
                "method_request_schema": {
                    "resourceArn": {
                        "description": "The ARN of a resource that can be tagged.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "test_invoke_authorizer",
                "method_documentation": "Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "Specifies a test invoke authorizer request's Authorizer ID.",
                        "type": "string"
                    },
                    "headers": {
                        "description": "A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.",
                        "type": "map"
                    },
                    "multiValueHeaders": {
                        "description": "The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.",
                        "type": "map"
                    },
                    "pathWithQueryString": {
                        "description": "The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.",
                        "type": "string"
                    },
                    "body": {
                        "description": "The simulated request body of an incoming invocation request.",
                        "type": "string"
                    },
                    "stageVariables": {
                        "description": "A key-value map of stage variables to simulate an invocation on a deployed Stage.",
                        "type": "map"
                    },
                    "additionalContext": {
                        "description": "A key-value map of additional context variables.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "clientStatus": {
                        "description": "The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.",
                        "type": "integer"
                    },
                    "log": {
                        "description": "The API Gateway execution log for the test authorizer request.",
                        "type": "string"
                    },
                    "latency": {
                        "description": "The execution latency, in ms, of the test authorizer request.",
                        "type": "long"
                    },
                    "principalId": {
                        "description": "The principal identity returned by the Authorizer",
                        "type": "string"
                    },
                    "policy": {
                        "description": "The JSON policy document returned by the Authorizer",
                        "type": "string"
                    },
                    "authorization": {
                        "description": "The authorization response.",
                        "type": "map"
                    },
                    "claims": {
                        "description": "The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "test_invoke_method",
                "method_documentation": "Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies a test invoke method request's resource ID.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies a test invoke method request's HTTP method.",
                        "type": "string"
                    },
                    "pathWithQueryString": {
                        "description": "The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.",
                        "type": "string"
                    },
                    "body": {
                        "description": "The simulated request body of an incoming invocation request.",
                        "type": "string"
                    },
                    "headers": {
                        "description": "A key-value map of headers to simulate an incoming invocation request.",
                        "type": "map"
                    },
                    "multiValueHeaders": {
                        "description": "The headers as a map from string to list of values to simulate an incoming invocation request.",
                        "type": "map"
                    },
                    "clientCertificateId": {
                        "description": "A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.",
                        "type": "string"
                    },
                    "stageVariables": {
                        "description": "A key-value map of stage variables to simulate an invocation on a deployed Stage.",
                        "type": "map"
                    }
                },
                "method_response_schema": {
                    "status": {
                        "description": "The HTTP status code.",
                        "type": "integer"
                    },
                    "body": {
                        "description": "The body of the HTTP response.",
                        "type": "string"
                    },
                    "headers": {
                        "description": "The headers of the HTTP response.",
                        "type": "map"
                    },
                    "multiValueHeaders": {
                        "description": "The headers of the HTTP response as a map from string to list of values.",
                        "type": "map"
                    },
                    "log": {
                        "description": "The API Gateway execution log for the test invoke request.",
                        "type": "string"
                    },
                    "latency": {
                        "description": "The execution latency, in ms, of the test invoke request.",
                        "type": "long"
                    }
                }
            },
            {
                "method_name": "untag_resource",
                "method_documentation": "Removes a tag from a given resource.",
                "method_request_schema": {
                    "resourceArn": {
                        "description": "The ARN of a resource that can be tagged.",
                        "type": "string"
                    },
                    "tagKeys": {
                        "description": "The Tag keys to delete.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "update_account",
                "method_documentation": "Changes information about the current Account resource.",
                "method_request_schema": {
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "cloudwatchRoleArn": {
                        "description": "The ARN of an Amazon CloudWatch role for the current Account. ",
                        "type": "string"
                    },
                    "throttleSettings": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "features": {
                        "description": "A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>\"UsagePlans\"</code>.",
                        "type": "list"
                    },
                    "apiKeyVersion": {
                        "description": "The version of the API keys used for the account.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_api_key",
                "method_documentation": "Changes information about an ApiKey resource.",
                "method_request_schema": {
                    "apiKey": {
                        "description": "The identifier of the ApiKey resource to be updated.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the API Key.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the API Key.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the API Key.",
                        "type": "string"
                    },
                    "customerId": {
                        "description": "An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the API Key.",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Specifies whether the API Key can be used by callers.",
                        "type": "boolean"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API Key was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the API Key was last updated.",
                        "type": "timestamp"
                    },
                    "stageKeys": {
                        "description": "A list of Stage resources that are associated with the ApiKey resource.",
                        "type": "list"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_authorizer",
                "method_documentation": "Updates an existing Authorizer resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of the Authorizer resource.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the authorizer resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the authorizer.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.",
                        "type": "string",
                        "enum": [
                            "TOKEN",
                            "REQUEST",
                            "COGNITO_USER_POOLS"
                        ]
                    },
                    "providerARNs": {
                        "description": "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. ",
                        "type": "list"
                    },
                    "authType": {
                        "description": "Optional customer-defined field, used in OpenAPI imports and exports without functional impact.",
                        "type": "string"
                    },
                    "authorizerUri": {
                        "description": "Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.",
                        "type": "string"
                    },
                    "authorizerCredentials": {
                        "description": "Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.",
                        "type": "string"
                    },
                    "identitySource": {
                        "description": "The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>, <code>method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional. ",
                        "type": "string"
                    },
                    "identityValidationExpression": {
                        "description": "A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.",
                        "type": "string"
                    },
                    "authorizerResultTtlInSeconds": {
                        "description": "The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.",
                        "type": "integer"
                    }
                }
            },
            {
                "method_name": "update_base_path_mapping",
                "method_documentation": "Changes information about the BasePathMapping resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The domain name of the BasePathMapping resource to change.",
                        "type": "string"
                    },
                    "basePath": {
                        "description": "The base path of the BasePathMapping resource to change. To specify an empty base path, set this parameter to <code>'(none)'</code>.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "basePath": {
                        "description": "The base path name that callers of the API must provide as part of the URL after the domain name.",
                        "type": "string"
                    },
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stage": {
                        "description": "The name of the associated stage.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_client_certificate",
                "method_documentation": "Changes information about an ClientCertificate resource.",
                "method_request_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the ClientCertificate resource to be updated.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "clientCertificateId": {
                        "description": "The identifier of the client certificate.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the client certificate.",
                        "type": "string"
                    },
                    "pemEncodedCertificate": {
                        "description": "The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the client certificate was created.",
                        "type": "timestamp"
                    },
                    "expirationDate": {
                        "description": "The timestamp when the client certificate will expire.",
                        "type": "timestamp"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_deployment",
                "method_documentation": "Changes information about a Deployment resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "deploymentId": {
                        "description": "The replacement identifier for the Deployment resource to change information about.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the deployment resource.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description for the deployment resource.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date and time that the deployment resource was created.",
                        "type": "timestamp"
                    },
                    "apiSummary": {
                        "description": "A summary of the RestApi at the date and time that the deployment resource was created.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_documentation_part",
                "method_documentation": "Updates a documentation part.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationPartId": {
                        "description": "The identifier of the to-be-updated documentation part.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The DocumentationPart identifier, generated by API Gateway when the <code>DocumentationPart</code> is created.",
                        "type": "string"
                    },
                    "location": {
                        "type": {
                            "description": "The type of API entity to which the documentation content applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Content inheritance does not apply to any entity of the <code>API</code>, <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>, <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type.",
                            "type": "string",
                            "enum": [
                                "API",
                                "AUTHORIZER",
                                "MODEL",
                                "RESOURCE",
                                "METHOD",
                                "PATH_PARAMETER",
                                "QUERY_PARAMETER",
                                "REQUEST_HEADER",
                                "REQUEST_BODY",
                                "RESPONSE",
                                "RESPONSE_HEADER",
                                "RESPONSE_BODY"
                            ]
                        },
                        "path": {
                            "description": "The URL path of the target. It is a valid field for the API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>/</code> for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>path</code> attribute must match that of the parent entity as a prefix.",
                            "type": "string"
                        },
                        "method": {
                            "description": "The HTTP verb of a method. It is a valid field for the API entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>method</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "statusCode": {
                            "description": "The HTTP status code of a response. It is a valid field for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. The default value is <code>*</code> for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other <code>location</code> attributes, the child entity's <code>statusCode</code> attribute must match that of the parent entity exactly.",
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the targeted API entity. It is a valid and required field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is an invalid field for any other entity type.",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "description": "A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_documentation_version",
                "method_documentation": "Updates a documentation version.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "documentationVersion": {
                        "description": "The version identifier of the to-be-updated documentation version.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "version": {
                        "description": "The version identifier of the API documentation snapshot.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The date when the API documentation snapshot is created.",
                        "type": "timestamp"
                    },
                    "description": {
                        "description": "The description of the API documentation snapshot.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_domain_name",
                "method_documentation": "Changes information about the DomainName resource.",
                "method_request_schema": {
                    "domainName": {
                        "description": "The name of the DomainName resource to be changed.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "domainName": {
                        "description": "The custom domain name as an API host name, for example, <code>my-api.example.com</code>.",
                        "type": "string"
                    },
                    "certificateName": {
                        "description": "The name of the certificate that will be used by edge-optimized endpoint for this domain name.",
                        "type": "string"
                    },
                    "certificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used by edge-optimized endpoint for this domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "certificateUploadDate": {
                        "description": "The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.",
                        "type": "timestamp"
                    },
                    "regionalDomainName": {
                        "description": "The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.",
                        "type": "string"
                    },
                    "regionalHostedZoneId": {
                        "description": "The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "regionalCertificateName": {
                        "description": "The name of the certificate that will be used for validating the regional domain name.",
                        "type": "string"
                    },
                    "regionalCertificateArn": {
                        "description": "The reference to an Amazon Web Services-managed certificate that will be used for validating the regional domain name. Certificate Manager is the only supported source.",
                        "type": "string"
                    },
                    "distributionDomainName": {
                        "description": "The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.",
                        "type": "string"
                    },
                    "distributionHostedZoneId": {
                        "description": "The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code> for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. ",
                        "type": "string"
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "domainNameStatus": {
                        "description": "The status of the DomainName migration. The valid values are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status is <code>UPDATING</code>, the domain cannot be modified further until the existing operation is complete. If it is <code>AVAILABLE</code>, the domain can be updated.",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "UPDATING",
                            "PENDING",
                            "PENDING_CERTIFICATE_REIMPORT",
                            "PENDING_OWNERSHIP_VERIFICATION"
                        ]
                    },
                    "domainNameStatusMessage": {
                        "description": "An optional text message containing detailed information about status of the DomainName migration.",
                        "type": "string"
                    },
                    "securityPolicy": {
                        "description": "The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.",
                        "type": "string",
                        "enum": [
                            "TLS_1_0",
                            "TLS_1_2"
                        ]
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "mutualTlsAuthentication": {
                        "truststoreUri": {
                            "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
                            "type": "string"
                        },
                        "truststoreVersion": {
                            "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.",
                            "type": "string"
                        },
                        "truststoreWarnings": {
                            "description": "A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.",
                            "type": "list"
                        }
                    },
                    "ownershipVerificationCertificateArn": {
                        "description": "The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_gateway_response",
                "method_documentation": "Updates a GatewayResponse of a specified response type on the given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "responseType": {
                        "description": "The response type of the associated GatewayResponse.",
                        "type": "string",
                        "enum": [
                            "DEFAULT_4XX",
                            "DEFAULT_5XX",
                            "RESOURCE_NOT_FOUND",
                            "UNAUTHORIZED",
                            "INVALID_API_KEY",
                            "ACCESS_DENIED",
                            "AUTHORIZER_FAILURE",
                            "AUTHORIZER_CONFIGURATION_ERROR",
                            "INVALID_SIGNATURE",
                            "EXPIRED_TOKEN",
                            "MISSING_AUTHENTICATION_TOKEN",
                            "INTEGRATION_FAILURE",
                            "INTEGRATION_TIMEOUT",
                            "API_CONFIGURATION_ERROR",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "BAD_REQUEST_PARAMETERS",
                            "BAD_REQUEST_BODY",
                            "REQUEST_TOO_LARGE",
                            "THROTTLED",
                            "QUOTA_EXCEEDED",
                            "WAF_FILTERED"
                        ]
                    },
                    "statusCode": {
                        "description": "The HTTP status code for this GatewayResponse.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
                        "type": "map"
                    },
                    "defaultResponse": {
                        "description": "A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. ",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "update_integration",
                "method_documentation": "Represents an update integration.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Represents an update integration request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Represents an update integration request's HTTP method.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "type": {
                        "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                        "type": "string",
                        "enum": [
                            "HTTP",
                            "AWS",
                            "MOCK",
                            "HTTP_PROXY",
                            "AWS_PROXY"
                        ]
                    },
                    "httpMethod": {
                        "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                        "type": "string"
                    },
                    "uri": {
                        "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                        "type": "string"
                    },
                    "connectionType": {
                        "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                        "type": "string",
                        "enum": [
                            "INTERNET",
                            "VPC_LINK"
                        ]
                    },
                    "connectionId": {
                        "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                        "type": "map"
                    },
                    "requestTemplates": {
                        "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                        "type": "map"
                    },
                    "passthroughBehavior": {
                        "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                        "type": "string"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    },
                    "timeoutInMillis": {
                        "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                        "type": "integer"
                    },
                    "cacheNamespace": {
                        "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                        "type": "string"
                    },
                    "cacheKeyParameters": {
                        "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                        "type": "list"
                    },
                    "integrationResponses": {
                        "statusCode": {
                            "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                            "type": "string"
                        },
                        "selectionPattern": {
                            "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                            "type": "map"
                        },
                        "responseTemplates": {
                            "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                            "type": "map"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        }
                    },
                    "tlsConfig": {
                        "insecureSkipVerification": {
                            "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                            "type": "boolean"
                        }
                    }
                }
            },
            {
                "method_name": "update_integration_response",
                "method_documentation": "Represents an update integration response.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "Specifies an update integration response request's resource identifier.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "Specifies an update integration response request's HTTP method.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "Specifies an update integration response request's status code.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                        "type": "string"
                    },
                    "selectionPattern": {
                        "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                        "type": "map"
                    },
                    "responseTemplates": {
                        "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                        "type": "map"
                    },
                    "contentHandling": {
                        "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                        "type": "string",
                        "enum": [
                            "CONVERT_TO_BINARY",
                            "CONVERT_TO_TEXT"
                        ]
                    }
                }
            },
            {
                "method_name": "update_method",
                "method_documentation": "Updates an existing Method resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the Method resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "httpMethod": {
                        "description": "The method's HTTP verb.",
                        "type": "string"
                    },
                    "authorizationType": {
                        "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                        "type": "string"
                    },
                    "authorizerId": {
                        "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                        "type": "string"
                    },
                    "apiKeyRequired": {
                        "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                        "type": "boolean"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of a RequestValidator for request validation.",
                        "type": "string"
                    },
                    "operationName": {
                        "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                        "type": "string"
                    },
                    "requestParameters": {
                        "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                        "type": "map"
                    },
                    "requestModels": {
                        "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                        "type": "map"
                    },
                    "methodResponses": {
                        "statusCode": {
                            "description": "The method response's status code.",
                            "type": "string"
                        },
                        "responseParameters": {
                            "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                            "type": "map"
                        },
                        "responseModels": {
                            "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                            "type": "map"
                        }
                    },
                    "methodIntegration": {
                        "type": {
                            "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                            "type": "string",
                            "enum": [
                                "HTTP",
                                "AWS",
                                "MOCK",
                                "HTTP_PROXY",
                                "AWS_PROXY"
                            ]
                        },
                        "httpMethod": {
                            "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                            "type": "string"
                        },
                        "uri": {
                            "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                            "type": "string"
                        },
                        "connectionType": {
                            "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                            "type": "string",
                            "enum": [
                                "INTERNET",
                                "VPC_LINK"
                            ]
                        },
                        "connectionId": {
                            "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                            "type": "string"
                        },
                        "credentials": {
                            "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                            "type": "map"
                        },
                        "requestTemplates": {
                            "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                            "type": "map"
                        },
                        "passthroughBehavior": {
                            "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                            "type": "string"
                        },
                        "contentHandling": {
                            "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                            "type": "string",
                            "enum": [
                                "CONVERT_TO_BINARY",
                                "CONVERT_TO_TEXT"
                            ]
                        },
                        "timeoutInMillis": {
                            "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                            "type": "integer"
                        },
                        "cacheNamespace": {
                            "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                            "type": "string"
                        },
                        "cacheKeyParameters": {
                            "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                            "type": "list"
                        },
                        "integrationResponses": {
                            "statusCode": {
                                "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                "type": "string"
                            },
                            "selectionPattern": {
                                "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                "type": "map"
                            },
                            "responseTemplates": {
                                "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                "type": "map"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            }
                        },
                        "tlsConfig": {
                            "insecureSkipVerification": {
                                "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                "type": "boolean"
                            }
                        }
                    },
                    "authorizationScopes": {
                        "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                        "type": "list"
                    }
                }
            },
            {
                "method_name": "update_method_response",
                "method_documentation": "Updates an existing MethodResponse resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The Resource identifier for the MethodResponse resource.",
                        "type": "string"
                    },
                    "httpMethod": {
                        "description": "The HTTP verb of the Method resource.",
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "The status code for the MethodResponse resource.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "statusCode": {
                        "description": "The method response's status code.",
                        "type": "string"
                    },
                    "responseParameters": {
                        "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                        "type": "map"
                    },
                    "responseModels": {
                        "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_model",
                "method_documentation": "Changes information about a model.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "modelName": {
                        "description": "The name of the model to update.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier for the model resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the model. Must be an alphanumeric string.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the model.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model. Do not include \"\\*/\" characters in the description of any properties because such \"\\*/\" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.",
                        "type": "string"
                    },
                    "contentType": {
                        "description": "The content-type for the model.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_request_validator",
                "method_documentation": "Updates a RequestValidator of a given RestApi.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "requestValidatorId": {
                        "description": "The identifier of RequestValidator to be updated.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of this RequestValidator.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of this RequestValidator",
                        "type": "string"
                    },
                    "validateRequestBody": {
                        "description": "A Boolean flag to indicate whether to validate a request body according to the configured Model schema.",
                        "type": "boolean"
                    },
                    "validateRequestParameters": {
                        "description": "A Boolean flag to indicate whether to validate request parameters (<code>true</code>) or not (<code>false</code>).",
                        "type": "boolean"
                    }
                }
            },
            {
                "method_name": "update_resource",
                "method_documentation": "Changes information about a Resource resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "resourceId": {
                        "description": "The identifier of the Resource resource.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The resource's identifier.",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "The parent resource's identifier.",
                        "type": "string"
                    },
                    "pathPart": {
                        "description": "The last path segment for this resource.",
                        "type": "string"
                    },
                    "path": {
                        "description": "The full path for this resource.",
                        "type": "string"
                    },
                    "resourceMethods": {
                        "httpMethod": {
                            "description": "The method's HTTP verb.",
                            "type": "string"
                        },
                        "authorizationType": {
                            "description": "The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
                            "type": "string"
                        },
                        "authorizerId": {
                            "description": "The identifier of an Authorizer to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>.",
                            "type": "string"
                        },
                        "apiKeyRequired": {
                            "description": "A boolean flag specifying whether a valid ApiKey is required to invoke this method.",
                            "type": "boolean"
                        },
                        "requestValidatorId": {
                            "description": "The identifier of a RequestValidator for request validation.",
                            "type": "string"
                        },
                        "operationName": {
                            "description": "A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.",
                            "type": "string"
                        },
                        "requestParameters": {
                            "description": "A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.",
                            "type": "map"
                        },
                        "requestModels": {
                            "description": "A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).",
                            "type": "map"
                        },
                        "methodResponses": {
                            "statusCode": {
                                "description": "The method response's status code.",
                                "type": "string"
                            },
                            "responseParameters": {
                                "description": "A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
                                "type": "map"
                            },
                            "responseModels": {
                                "description": "Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.",
                                "type": "map"
                            }
                        },
                        "methodIntegration": {
                            "type": {
                                "description": "Specifies an API method integration type. The valid value is one of the following: For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.",
                                "type": "string",
                                "enum": [
                                    "HTTP",
                                    "AWS",
                                    "MOCK",
                                    "HTTP_PROXY",
                                    "AWS_PROXY"
                                ]
                            },
                            "httpMethod": {
                                "description": "Specifies the integration's HTTP method type. For the Type property, if you specify <code>MOCK</code>, this property is optional. For Lambda integrations, you must set the integration method to <code>POST</code>. For all other types, you must specify this property.",
                                "type": "string"
                            },
                            "uri": {
                                "description": "Specifies Uniform Resource Identifier (URI) of the integration endpoint. For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If <code>connectionType</code> is <code>VPC_LINK</code> specify the Network Load Balancer DNS name. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> ",
                                "type": "string"
                            },
                            "connectionType": {
                                "description": "The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.",
                                "type": "string",
                                "enum": [
                                    "INTERNET",
                                    "VPC_LINK"
                                ]
                            },
                            "connectionId": {
                                "description": "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.",
                                "type": "string"
                            },
                            "credentials": {
                                "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported Amazon Web Services services, specify null.",
                                "type": "string"
                            },
                            "requestParameters": {
                                "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.",
                                "type": "map"
                            },
                            "requestTemplates": {
                                "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.",
                                "type": "map"
                            },
                            "passthroughBehavior": {
                                "description": "Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.",
                                "type": "string"
                            },
                            "contentHandling": {
                                "description": "Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.",
                                "type": "string",
                                "enum": [
                                    "CONVERT_TO_BINARY",
                                    "CONVERT_TO_TEXT"
                                ]
                            },
                            "timeoutInMillis": {
                                "description": "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.",
                                "type": "integer"
                            },
                            "cacheNamespace": {
                                "description": "Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.",
                                "type": "string"
                            },
                            "cacheKeyParameters": {
                                "description": "A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.",
                                "type": "list"
                            },
                            "integrationResponses": {
                                "statusCode": {
                                    "description": "Specifies the status code that is used to map the integration response to an existing MethodResponse.",
                                    "type": "string"
                                },
                                "selectionPattern": {
                                    "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an Lambda function, the Lambda function error header is matched. For all other HTTP and Amazon Web Services back ends, the HTTP status code is matched.",
                                    "type": "string"
                                },
                                "responseParameters": {
                                    "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.",
                                    "type": "map"
                                },
                                "responseTemplates": {
                                    "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.",
                                    "type": "map"
                                },
                                "contentHandling": {
                                    "description": "Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors: If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.",
                                    "type": "string",
                                    "enum": [
                                        "CONVERT_TO_BINARY",
                                        "CONVERT_TO_TEXT"
                                    ]
                                }
                            },
                            "tlsConfig": {
                                "insecureSkipVerification": {
                                    "description": "Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code> integrations. <important> Enabling <code>insecureSkipVerification</code> isn't recommended, especially for integrations with public HTTPS endpoints. If you enable <code>insecureSkipVerification</code>, you increase the risk of man-in-the-middle attacks. </important>",
                                    "type": "boolean"
                                }
                            }
                        },
                        "authorizationScopes": {
                            "description": "A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.",
                            "type": "list"
                        }
                    }
                }
            },
            {
                "method_name": "update_rest_api",
                "method_documentation": "Changes information about the specified API.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The API's identifier. This identifier is unique across all of your APIs in API Gateway.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The API's name.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The API's description.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The timestamp when the API was created.",
                        "type": "timestamp"
                    },
                    "version": {
                        "description": "A version identifier for the API.",
                        "type": "string"
                    },
                    "warnings": {
                        "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import.",
                        "type": "list"
                    },
                    "binaryMediaTypes": {
                        "description": "The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.",
                        "type": "list"
                    },
                    "minimumCompressionSize": {
                        "description": "A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.",
                        "type": "integer"
                    },
                    "apiKeySource": {
                        "description": "The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.",
                        "type": "string",
                        "enum": [
                            "HEADER",
                            "AUTHORIZER"
                        ]
                    },
                    "endpointConfiguration": {
                        "types": {
                            "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>.",
                            "type": "list"
                        },
                        "vpcEndpointIds": {
                            "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type.",
                            "type": "list"
                        }
                    },
                    "policy": {
                        "description": "A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "disableExecuteApiEndpoint": {
                        "description": "Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.",
                        "type": "boolean"
                    },
                    "rootResourceId": {
                        "description": "The API's root resource ID.",
                        "type": "string"
                    }
                }
            },
            {
                "method_name": "update_stage",
                "method_documentation": "Changes information about a Stage resource.",
                "method_request_schema": {
                    "restApiId": {
                        "description": "The string identifier of the associated RestApi.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the Stage resource to change information about.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "deploymentId": {
                        "description": "The identifier of the Deployment that the stage points to.",
                        "type": "string"
                    },
                    "clientCertificateId": {
                        "description": "The identifier of a client certificate for an API stage.",
                        "type": "string"
                    },
                    "stageName": {
                        "description": "The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The stage's description.",
                        "type": "string"
                    },
                    "cacheClusterEnabled": {
                        "description": "Specifies whether a cache cluster is enabled for the stage.",
                        "type": "boolean"
                    },
                    "cacheClusterSize": {
                        "description": "The stage's cache capacity in GB. For more information about choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\">Enabling API caching to enhance responsiveness</a>.",
                        "type": "string",
                        "enum": [
                            "0.5",
                            "1.6",
                            "6.1",
                            "13.5",
                            "28.4",
                            "58.2",
                            "118",
                            "237"
                        ]
                    },
                    "cacheClusterStatus": {
                        "description": "The status of the cache cluster for the stage, if enabled.",
                        "type": "string",
                        "enum": [
                            "CREATE_IN_PROGRESS",
                            "AVAILABLE",
                            "DELETE_IN_PROGRESS",
                            "NOT_AVAILABLE",
                            "FLUSH_IN_PROGRESS"
                        ]
                    },
                    "methodSettings": {
                        "metricsEnabled": {
                            "description": "Specifies whether Amazon CloudWatch metrics are enabled for this method.",
                            "type": "boolean"
                        },
                        "loggingLevel": {
                            "description": "Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level entries to CloudWatch Logs, or choose <code>INFO</code> to include all <code>ERROR</code> events as well as extra informational events.",
                            "type": "string"
                        },
                        "dataTraceEnabled": {
                            "description": "Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs.",
                            "type": "boolean"
                        },
                        "throttlingBurstLimit": {
                            "description": "Specifies the throttling burst limit.",
                            "type": "integer"
                        },
                        "throttlingRateLimit": {
                            "description": "Specifies the throttling rate limit.",
                            "type": "double"
                        },
                        "cachingEnabled": {
                            "description": "Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.",
                            "type": "boolean"
                        },
                        "cacheTtlInSeconds": {
                            "description": "Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.",
                            "type": "integer"
                        },
                        "cacheDataEncrypted": {
                            "description": "Specifies whether the cached responses are encrypted.",
                            "type": "boolean"
                        },
                        "requireAuthorizationForCacheControl": {
                            "description": "Specifies whether authorization is required for a cache invalidation request.",
                            "type": "boolean"
                        },
                        "unauthorizedCacheControlHeaderStrategy": {
                            "description": "Specifies how to handle unauthorized requests for cache invalidation.",
                            "type": "string",
                            "enum": [
                                "FAIL_WITH_403",
                                "SUCCEED_WITH_RESPONSE_HEADER",
                                "SUCCEED_WITHOUT_RESPONSE_HEADER"
                            ]
                        }
                    },
                    "variables": {
                        "description": "A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.",
                        "type": "map"
                    },
                    "documentationVersion": {
                        "description": "The version of the associated API documentation.",
                        "type": "string"
                    },
                    "accessLogSettings": {
                        "format": {
                            "description": "A single line format of the access logs of data, as specified by selected $context variables. The format must include at least <code>$context.requestId</code>.",
                            "type": "string"
                        },
                        "destinationArn": {
                            "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with <code>amazon-apigateway-</code>.",
                            "type": "string"
                        }
                    },
                    "canarySettings": {
                        "percentTraffic": {
                            "description": "The percent (0-100) of traffic diverted to a canary deployment.",
                            "type": "double"
                        },
                        "deploymentId": {
                            "description": "The ID of the canary deployment.",
                            "type": "string"
                        },
                        "stageVariableOverrides": {
                            "description": "Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.",
                            "type": "map"
                        },
                        "useStageCache": {
                            "description": "A Boolean flag to indicate whether the canary deployment uses the stage cache or not.",
                            "type": "boolean"
                        }
                    },
                    "tracingEnabled": {
                        "description": "Specifies whether active tracing with X-ray is enabled for the Stage.",
                        "type": "boolean"
                    },
                    "webAclArn": {
                        "description": "The ARN of the WebAcl associated with the Stage.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    },
                    "createdDate": {
                        "description": "The timestamp when the stage was created.",
                        "type": "timestamp"
                    },
                    "lastUpdatedDate": {
                        "description": "The timestamp when the stage last updated.",
                        "type": "timestamp"
                    }
                }
            },
            {
                "method_name": "update_usage",
                "method_documentation": "Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the usage plan associated with the usage data.",
                        "type": "string"
                    },
                    "keyId": {
                        "description": "The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "usagePlanId": {
                        "description": "The plan Id associated with this usage data.",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The starting date of the usage data.",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "The ending date of the usage data.",
                        "type": "string"
                    },
                    "position": {
                        "description": "",
                        "type": "string"
                    },
                    "items": {
                        "description": "The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., \"values\" : { \"{api_key}\" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_usage_plan",
                "method_documentation": "Updates a usage plan of a given plan Id.",
                "method_request_schema": {
                    "usagePlanId": {
                        "description": "The Id of the to-be-updated usage plan.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of a UsagePlan resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of a usage plan.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of a usage plan.",
                        "type": "string"
                    },
                    "apiStages": {
                        "description": "The associated API stages of a usage plan.",
                        "type": "list"
                    },
                    "throttle": {
                        "burstLimit": {
                            "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
                            "type": "integer"
                        },
                        "rateLimit": {
                            "description": "The API target request rate limit.",
                            "type": "double"
                        }
                    },
                    "quota": {
                        "limit": {
                            "description": "The target maximum number of requests that can be made in a given time period.",
                            "type": "integer"
                        },
                        "offset": {
                            "description": "The number of requests subtracted from the given limit in the initial time period.",
                            "type": "integer"
                        },
                        "period": {
                            "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
                            "type": "string",
                            "enum": [
                                "DAY",
                                "WEEK",
                                "MONTH"
                            ]
                        }
                    },
                    "productCode": {
                        "description": "The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            },
            {
                "method_name": "update_vpc_link",
                "method_documentation": "Updates an existing VpcLink of a specified identifier.",
                "method_request_schema": {
                    "vpcLinkId": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    },
                    "patchOperations": {
                        "description": "For more information about supported patch operations, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\">Patch Operations</a>.",
                        "type": "list"
                    }
                },
                "method_response_schema": {
                    "id": {
                        "description": "The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name used to label and identify the VPC link.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the VPC link.",
                        "type": "string"
                    },
                    "targetArns": {
                        "description": "The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same Amazon Web Services account of the API owner.",
                        "type": "list"
                    },
                    "status": {
                        "description": "The status of the VPC link. The valid values are <code>AVAILABLE</code>, <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>. Deploying an API will wait if the status is <code>PENDING</code> and will fail if the status is <code>DELETING</code>. ",
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "PENDING",
                            "DELETING",
                            "FAILED"
                        ]
                    },
                    "statusMessage": {
                        "description": "A description about the VPC link status.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The collection of tags. Each tag element is associated with a given resource.",
                        "type": "map"
                    }
                }
            }
        ]
    }
}